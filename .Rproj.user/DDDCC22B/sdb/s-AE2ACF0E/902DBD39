{
    "contents" : "#' @export\n#' @import ggplot2\n#'\n#' @title Choropleth Maps of Denmark\n#'\n#' @name mapDK\n# http://r-pkgs.had.co.nz/\n#\n# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload: 'Cmd + Shift + B'\n#   Check: 'Cmd + Shift + E'\n#   Test: 'Cmd + Shift + T'\n#\nmapDK <- function(values = NULL, id = NULL, dataSource = \"data\", detail = \"municipal\", show_missing = TRUE, sub = NULL,\n  graphPar = list(\n    guide.label = NULL)\n  ){\n\n  if (!is.null(values) & is.null(id)){\n    warning(\"id not provided. values assigned by order\")\n    }\n\n  if (!is.null(values) & !is.null(id)){\n    if(!is.character(id)){\n      stop(\"id must be a vector of strings otherwise it can be missing and values are assigned by order\")\n    }\n    ### Remove all non alphanumeric characters from region names and transform to lower case\n    onlyChar <- function(string) {\n      tolower(gsub(\" \", \"\", gsub(\"[^[:alnum:]]\", \" \", string)))\n    }\n\n    ### Check if some region name is not matched\n    if(sum(is.na(match(onlyChar(id), onlyChar(id.shape)))) > 0) {\n      warning(paste(\"Some id not recognized:\", paste(id[is.na(match_missing)], collapse = \", \")))\n    }\n  }\n\n  ### If dataSource is a dataframe use it\n  if (class(data) == \"data.frame\") shapedata = data\n  ### If dataSource is a string load data\n  if (class(dataSource) == \"character\") {\n    if (dataSource == \"data\") {\n      if (detail == \"municipal\") {\n        shapedata <- municipality.new # require LazyData in DESCRIPTION\n      }\n      if (detail == \"parish\")\n        shapedata <- parish\n    }\n  }\n\n  ### Match region ID or names\n  id.shape <- unique(shapedata$id)\n\n  if(is.numeric(id)) {\n    id_input <- id\n    id <- id.shape[!is.na(match(onlyChar(id.shape), onlyChar(id)))]\n  }\n  match.all <- match(onlyChar(id.shape), onlyChar(id)) # NA if not all region are provided\n  match.missing <- match(onlyChar(id), onlyChar(id.shape)) # NA if some region is not recognized\n\n  pos <- match(onlyChar(shapedata$id), onlyChar(id))\n\n\n  ### Check if some region name is not matched\n  if(sum(is.na(match(onlyChar(id), onlyChar(id.shape)))) > 0) {\n    warning(paste(\"Some id not recognized:\", paste(id[is.na(match_missing)], collapse = \", \")))\n  }\n  ### Select 'sub' regions\n  if(show_missing == FALSE) {\n    sub_fromData <- id.shape[!is.na(match(onlyChar(id.shape), onlyChar(id)))]\n    if(is.null(sub)) {\n      sub <- sub_fromData\n    } else {\n      sub <- sub[onlyChar(sub) %in% onlyChar(sub_fromData)]\n    }\n  }\n  if (!is.null(sub)) {\n    # Match sub and region\n    sub_match_all <- match(onlyChar(shapedata$id), onlyChar(sub))\n    sub_match_missing <- match(onlyChar(sub), onlyChar(shapedata$id))\n    # Remove shapedata not in sub\n    shapedata <- shapedata[onlyChar(shapedata$id) %in% onlyChar(sub), ]\n    # Remove values not in sub\n    values <- values[onlyChar(id) %in% onlyChar(sub)]\n    # Remove pos not in sub\n    pos <- sub_match_all[which(!is.na(sub_match_all))]\n    # Check if some region sub is not matched\n    if(sum(is.na(sub_match_missing)) > 0) {\n      warning(paste(\"Some sub not recognized:\", paste(id[is.na(sub_match_missing)], collapse = \", \")))\n    }\n  }\n\n  ### If the label for the legend is not specified\n  if(is.null(graphPar$guide.label)) graphPar$guide.label <- deparse(substitute(values))\n  ### If guide.label contains $, keep the second part\n  if(grepl(\"\\\\$\", graphPar$guide.label)) {\n    graphPar$guide.label <- unlist(strsplit(graphPar$guide.label, \"\\\\$\"))[2]\n  }\n\n  ### Transform values to factor\n  if(is.numeric(values)) {\n    discrete <- FALSE\n  } else {\n    discrete <- TRUE\n    values <- as.factor(values)\n  }\n\n  ### Add values to shape data\n  shapedata[, \"values\"] <- values[pos]\n\n  gp <- ggplot(shapedata, aes_string(x = \"long\", y = \"lat\", group = \"group\"))\n  map <- geom_polygon()\n  if (!is.null(values)){\n    map <- geom_polygon(aes_string(fill = \"values\"))\n  }\n  thm <- theme(axis.line=element_blank(),\n    axis.text.x=element_blank(),\n    axis.text.y=element_blank(),\n    axis.ticks=element_blank(),\n    axis.title.x=element_blank(),\n    axis.title.y=element_blank(),\n    panel.background=element_blank(),\n    panel.border=element_blank(),\n    panel.grid.major=element_blank(),\n    panel.grid.minor=element_blank(),\n    plot.background=element_blank())\n\n  out <- gp + map + thm\n  return(out)\n}\n",
    "created" : 1422440017489.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1984625588",
    "id" : "902DBD39",
    "lastKnownWriteTime" : 1422446481,
    "path" : "~/git/mapDK/R/hello.R",
    "project_path" : "R/hello.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}